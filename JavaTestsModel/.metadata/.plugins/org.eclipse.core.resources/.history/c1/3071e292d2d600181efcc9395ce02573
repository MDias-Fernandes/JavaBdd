package commonsMethods;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class CommonsWebDriver {
	
	public static ChromeDriver DRIVER;
	
	@Before
	public static void getUrl(String url) {
		DRIVER = new ChromeDriver();
		DRIVER.get(url);
	}
	
	@After
	public static void closeWindow() {
		DRIVER.quit();
	}
	
	
	
	//CommonsMethods
	//Current Window Text Title
	//public static void validateWindowTextTitle(String expected) {
	//	String actualWindowTitle = DRIVER.getTitle();
	//	assertEquals(actualWindowTitle, expected);
	//}
	
	//execute a JS script
	public static void executeJsScript(String scriptToBeExecuted) {
		if (DRIVER instanceof JavascriptExecutor) {
		    ((JavascriptExecutor)DRIVER).executeScript(scriptToBeExecuted);
		} else {
		    throw new IllegalStateException("O DRIVER UTILIZADO NÃO UTILIZA JAVASCRIPT!!!");
		}
	}
	
	//Sleep a while and find ONLY ONE element
	public static WebElement sleepAndFindElement(int timeForWait, By checkElementVisibility) {
		int counter = 1;
		WebElement elementFinded = null;
		while (counter <= timeForWait) {
			try {
				TimeUnit.SECONDS.sleep(1);
				elementFinded = DRIVER.findElement(checkElementVisibility);
				break;
			} catch (Exception error) {
				System.out.println("ELEMENTO ("+ checkElementVisibility.toString() +") NÃO ENCONTRADO NA TENTATIVA: " + counter);
				System.out.println(error + "\n");
				counter = counter + 1;
			}
		}
		if (elementFinded.equals(null)) {
			System.out.println("TIMEOUT NA LOCALIZAÇÃO DO ELEMENTO ("+ checkElementVisibility.toString() + ")" + "\n");
			return null;
		} else {
			System.out.println("ELEMENTO ("+ checkElementVisibility.toString() +") ENCONTRADO NA TENTATIVA: " + counter);
			return elementFinded;
		}
	}




	public static void validateWindowTextTitle(int timeForWait, String expected) {
		String actualWindowTitle = DRIVER.getTitle();
		int counter = 1;
		while (counter <= timeForWait) {
			try {
				TimeUnit.SECONDS.sleep(1);
				if ((actualWindowTitle.equals(expected)).equals(true)) {
					break;
				}
			} 
			catch (InterruptedException e) {
				System.out.println("TÍTULO ("+ actualWindowTitle +") NÃO É IGUAL A: ("+ expected +") NA TENTATIVA: " + counter);
				counter = counter + 1;
				System.out.println(e.getMessage());
			}
		}
		System.out.println("TÍTULO ("+ actualWindowTitle +") IGUAL A: " + expected);
	}




	//Sleep a while and find AN ARRAY of elements
	public static List<WebElement> sleepAndFindArrayOfElements(int timeForWait, By checkElementsVisibility) {
		int counter = 1;
		List<WebElement> elementsFinded = null;
		while (counter <= timeForWait) {
			try {
				TimeUnit.SECONDS.sleep(1);
				elementsFinded = DRIVER.findElements(checkElementsVisibility);
				break;
			} catch (Exception error) {
				System.out.println("ELEMENTOS ("+ checkElementsVisibility.toString() +") NÃO ENCONTRADOS NA TENTATIVA: " + counter);
				System.out.println(error + "\n");
				counter = counter + 1;
			}
		}
		if (elementsFinded.equals(null)) {
			System.out.println("TIMEOUT NA LOCALIZAÇÃO DOS ELEMENTOS ("+ checkElementsVisibility.toString() + ")" + "\n");
			return null;
		} else {
			for ( WebElement allFinded: elementsFinded) {
		        System.out.println("ELEMENTO " + allFinded.toString() + " ENCONTRADO, E SUA VISIBILIDADE É: " + allFinded.isDisplayed());
		    }
			return elementsFinded;
		}
	}
	
	//Take a screenshot of the screen
	public static void takeScreenShot(int timeForWait, By elementInstanceBy) {
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH.mm.ss");
		DateTime dateTime = DateTime.now();
		String dateOfScreenshot = dateFormat.format(dateTime.toDate());
		
		try {
			TimeUnit.SECONDS.sleep(timeForWait);
			
			WebElement elementToBePrinted = DRIVER.findElement(elementInstanceBy);
			((JavascriptExecutor)DRIVER).executeScript("arguments[0].scrollIntoView();", elementToBePrinted);
		    
			TakesScreenshot ts = (TakesScreenshot) DRIVER;
		    File source = ts.getScreenshotAs(OutputType.FILE);
		    FileUtils.copyFile(source, new File("../Screenshots/" + dateOfScreenshot + ".png"));
		    System.out.println("SCREENSHOT NA PÁGINA REALIZADO COM SUCESSO!" + "\n\n");
		}
		catch (Exception e) 
		{
		    System.out.println("EXCEÇÃO AO REALIZAR UM SCREENSHOT DA PÁGINA: " + e.getMessage() + "\n\n");
		}
	}

}